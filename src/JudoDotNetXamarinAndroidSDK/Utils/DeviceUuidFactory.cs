using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

using Android.App;
using Android.Content;
using Android.OS;
using Android.Provider;
using Android.Runtime;
using Android.Text;
using Android.Views;
using Android.Widget;
using Java.Lang;
using Java.Util;
using Exception = System.Exception;

namespace JudoDotNetXamarinSDK.Utils
{
    public class DeviceUuidFactory
    {

        protected const string PREFS_FILE = "device_id.xml";
        protected const string PREFS_DEVICE_ID = "device_id";

        private readonly object _lock = new object();
        protected static UUID uuid;

        public DeviceUuidFactory(Context context)
        {
            if (uuid == null)
            {
                lock (_lock)
                {
                    if (uuid == null)
                    {
                        var prefs = context.GetSharedPreferences(PREFS_FILE, FileCreationMode.Private);
                        var id = prefs.GetString(PREFS_DEVICE_ID, null);

                        if (!string.IsNullOrWhiteSpace(id))
                        {
                            // Use the ids previously computed and stored in the prefs file
                            uuid = UUID.FromString(id);
                        }
                        else
                        {
                            var androidId = Settings.Secure.GetString(context.ContentResolver, Settings.Secure.AndroidId);

                            // Use the Android ID unless it's broken, in which case fallback on deviceId,
                            // unless it's not available, then fallback on a random number which we store
                            // to a prefs file

                            if ("9774d56d682e549c" == androidId)
                            {
                                //Generate a new UUID rather than require READ_PHONE_STATE
                                var c = new Java.Lang.String(androidId);
                                uuid = UUID.NameUUIDFromBytes(c.GetBytes("utf8"));
                            }
                            else
                            {
                                uuid = UUID.RandomUUID();
                            }

                            prefs.Edit().PutString(PREFS_DEVICE_ID, uuid.ToString()).Apply();
                        }
                    }
                }
            }
        }

        /**
	     * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
	     * to be unique across all Android devices.  Much more so than ANDROID_ID is.
	     *
	     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back
	     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
	     * usable value.
	     *
	     * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
	     * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
	     * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
	     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
	     *
	     *
	     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
	     *
	     * @see http://code.google.com/p/android/issues/detail?id=10603
	     *
	     * @return a UUID that may be used to uniquely identify your device for most purposes.
	     */
        public string GetDeviceUuid()
        {
            return uuid.ToString();
        }
    }
}